@page "/enqueue"
@* @attribute [StreamRendering(true)] *@
@rendermode InteractiveServer
@* @attribute [OutputCache(Duration = 5)] *@

@inject BackendApiClient api

<PageTitle>enqueue</PageTitle>

<h1>enqueue</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

<p>
    <button @onclick="SimulateWeatherForecast">
        Simulate weather forecast
    </button>
</p>

@code {
    private async Task SimulateWeatherForecast()
    {
        string[] locations = ["Porto", "Barcelona", "London", "Rio de Janeiro", "Paris", "Zurick"];
        string[] summaries = ["Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" ];

        await api.EnqueueAsync(new WeatherForecast(locations[Random.Shared.Next(locations.Length)], DateOnly.FromDateTime(DateTime.Now.AddDays(Random.Shared.Next(5))), Random.Shared.Next(-20, 55), summaries[Random.Shared.Next(summaries.Length)]));
    }

    protected override async Task OnInitializedAsync()
    {
        
    }
}
